DATA STRUCTURES
  collection of values and relationships between them
  have functions and operations that can be applied to the data in it

SINGLY LINKED LISTS
  Description
    distinction between linked list and array - linked list doesnt have any indeces
      cons - cant access random index
      pros - insertion and deletion is inexpensive since values dont have to be reindexed
    has nodes, which has both a value and pointer to the next node
    contains a head, tail, and length
    connected in a single direction to the next node
  Big O Complexity
    insertion O(1) doesnt matter where the insertion is
    removal O(N) depends on where the removal is
    searching O(N)
    access O(N) where arrays are O(1)
  Recap
    better than arrays when insertion and deletion are required at the beginning
    worse than arrays when random access is required

DOUBLY LINKED LISTS
  Description
    distinction between dll and sll
      every node has a previous node pointer
      more flexibility but uses more memory
  Big O Complexity
    insertion O(1)
    removal O(N)
    searching O(N) but technically O(N/2) compared to sll
    access O(N) but technically O(N/2) compared to sll
  Recap
    additional pointer compared to sll can go from front or back
    lots of operations can be twice as fast as sll
    but they take more memory because of the extra pointer

STACKS
  Description
    abstract data structure that abides by the LIFO (last in first out) structure
    examples of stacks: function call stacks, undo/redo feature, routing
  Big O Complexity
    insertion O(1)
    removal O(1)
    searching, access O(N) but these features are unimportant
  Recap
    LIFO abstract data structure
    not a built in data structure in javascript

QUEUES
  Description
    abstract data structure that abides by the FIFO (first in first out) structure
    example of queues: background tasks, print processing, uploading resources
  Big O Complexity
    insertion O(1)
    removal O(1)
    searching, access O(N) but these features are unimportant
  Recap
    FIFO abstract data structure
    differs from stack just in which end gets removed first

TREES
  Description
    Data structure that consists of nodes in a parent-child relationship
    Non-linear, multiple paths unlike lists
    examples of trees: HTML DOM, network routing, abstract syntax trees, AI, folders in OS
  Binary trees
    Each parent can have a max of 2 children
  Binary search trees (BSTs)
    Special case of binary tree where every node to the left of a parent is less than the parent
    and every node to the right of a parent is greater than the parent
  Big O Complexity
    insertion O(logn) if even sided tree
    searching O(logn) if even sided tree
  Tree Traversal
    Breadth-first Search (BFS)
      Working down each level horizontally from top
    Depth-first Search (DFS)
      In-order
        returns in actual increasing order
      Pre-order
        returns in an order convenient to remake the tree
      Post-order
    BFS and DFS Comparison
      Time complexity is the same for both searches because each node is visited once
      DFS uses less space when tree is wide

HEAPS
  Description
    Similar to a BST but with some different rules
    MaxBinaryHeap: parent is greater than child
    MinBinaryHeap: parent is less than child
    Binary heaps are as compact as possible, with left child being filled out first
    Used to implement Priority Queues and with graph traversals
  Access Index
    Left child is at 2n+1
    Right child is at 2n+2
    Parent is at (n-1)/2 floored
  Priority Queues
    data strucutre where elements with higher priority are served before ones with lower priority
  Big O Complexity
    Insertion O(logn)
    Removal O(logn)
    Search O(N)
  Recap
    Binary heaps are useful for sorting and implementing priority queues
    Easy to represent a heap in an array

HASH TABLE
  Description
    Hash tables are used to store key-value pairs
    Keys are not ordered and don't have to be numeric
  What makes a good hash?
    Needs to be fast
    Distrubted evenly at different indices
    Deterministic - same input yields same output
  Handling Collisions
    Separate Chaining
      At each index, values are stored in a more sophisticated data structure
      Allows multiple key-value pairs to be stored at the same position
    Linear Probing
      At colliision, search array to find the next empty slot
      Each index is a unique key-index
    Big O Complexity
      Insertion O(1)
      Deletion O(1)
      Access O(1)
